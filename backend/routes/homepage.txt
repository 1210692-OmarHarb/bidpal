import React, { useState, useEffect } from "react";
import Navigation from "../../components/Navigation";
import Footer from "../../components/Footer";
import { ChevronLeft, ChevronRight } from "lucide-react";
import axios from "axios";
import "../../styles/homePage.css";

function Homepage() {
  const [categories, setCategories] = useState([]);
  const [statuses, setStatuses] = useState([]);
  const [carouselItems, setCarouselItems] = useState([]);
  const [featuredAuctions, setFeaturedAuctions] = useState([]);
  const [tabAuctions, setTabAuctions] = useState({
    live: [],
    upcoming: [],
    ending: [],
  });

  const [activeTab, setActiveTab] = useState("live");
  const [currentIndex, setCurrentIndex] = useState(0);
  const [featuredSlideIndex, setFeaturedSlideIndex] = useState(0);
  const [tabSlideIndex, setTabSlideIndex] = useState(0);

  // Fetch all homepage data
  useEffect(() => {
    axios
      .get("http://localhost:5000/api/homepage/categories")
      .then((res) => setCategories(res.data));

    axios
      .get("http://localhost:5000/api/homepage/statuses")
      .then((res) => setStatuses(res.data));

    axios
      .get("http://localhost:5000/api/homepage/carousel")
      .then((res) => setCarouselItems(res.data));

    axios
      .get("http://localhost:5000/api/homepage/featured")
      .then((res) => setFeaturedAuctions(res.data));

    ["live", "upcoming", "ending"].forEach((status) => {
      axios
        .get(`http://localhost:5000/api/homepage/auctions/${status}`)
        .then((res) =>
          setTabAuctions((prev) => ({ ...prev, [status]: res.data }))
        );
    });
  }, []);

  // Auto carousel
  useEffect(() => {
    if (carouselItems.length > 0) {
      const interval = setInterval(() => {
        setCurrentIndex((prev) => (prev + 1) % carouselItems.length);
      }, 3000);
      return () => clearInterval(interval);
    }
  }, [carouselItems]);
  // Featured auctions slider controls
  const nextFeatured = () => {
    setFeaturedSlideIndex((prev) =>
      prev + 3 >= featuredAuctions.length ? 0 : prev + 3
    );
  };

  const prevFeatured = () => {
    setFeaturedSlideIndex((prev) =>
      prev - 3 < 0 ? Math.max(0, featuredAuctions.length - 3) : prev - 3
    );
  };
  const nextTab = () => {
    const currentAuctions = tabAuctions[activeTab];
    setTabSlideIndex((prev) =>
      prev + 3 >= currentAuctions.length ? 0 : prev + 3
    );
  };

  const prevTab = () => {
    const currentAuctions = tabAuctions[activeTab];
    setTabSlideIndex((prev) =>
      prev - 3 < 0 ? Math.max(0, currentAuctions.length - 3) : prev - 3
    );
  };

  return (
    <>
      <Navigation />
      <div className="homepage">
        {/* === Search bar === */}
        <div className="auction-search-bar">
          <input type="text" placeholder="Search auctions..." />
          <select>
            <option value="">All Categories</option>
            {categories.map((c) => (
              <option key={c.categoryID}>{c.name}</option>
            ))}
          </select>
          <select>
            <option value="">Status</option>
            {statuses.map((s, idx) => (
              <option key={idx}>{s}</option>
            ))}
          </select>
          <button className="search-btn">Search</button>
        </div>

        {/* === Hero carousel === */}
        {carouselItems.length > 0 && (
          <section className="hero-carousel">
            <div className="carousel-item">
              <img
                src={JSON.parse(carouselItems[currentIndex].images)[0]}
                alt={carouselItems[currentIndex].title}
                className="carousel-item-img"
              />
              <div className="carousel-info">
                <h2>{carouselItems[currentIndex].title}</h2>
                <p>{carouselItems[currentIndex].description}</p>
                <button>Place Bid</button>
                <button>Add to Watchlist</button>
              </div>
            </div>
          </section>
        )}

        <section className="featured-auctions">
          <div className="section-header">
            <h2>Discover New Featured Auctions</h2>
            <div className="slider-controls">
              <button onClick={prevFeatured} className="slider-btn">
                <ChevronLeft size={20} />
              </button>
              <button onClick={nextFeatured} className="slider-btn">
                <ChevronRight size={20} />
              </button>
            </div>
          </div>

          <div className="slider-container">
            <div
              className="auction-slider"
              style={{
                transform: `translateX(-${featuredSlideIndex * (100 / 3)}%)`,
                transition: "transform 0.3s ease-in-out",
              }}
            >
              {featuredAuctions.map((a) => (
                <div key={a.auctionID} className="auction-card">
                  <img src={a.images[0]} alt={a.title} />

                  {/* Category + Title */}
                  <p className="auction-category">{a.categoryName}</p>
                  <h3>{a.title}</h3>

                  {/* Conditional logic */}
                  {a.status === "upcoming" ? (
                    <>
                      <p>
                        Available: {new Date(a.startDate).toLocaleDateString()}
                      </p>
                      <p>Starting Price: ${a.startingPrice}</p>
                    </>
                  ) : a.status === "live" ? (
                    <p>Starting Price: ${a.startingPrice}</p>
                  ) : null}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* === Tabs === */}
        <section className="auction-tabs">
          <nav className="tabs-nav">
            {["live", "upcoming", "ending"].map((tab) => (
              <button
                key={tab}
                className={activeTab === tab ? "active" : ""}
                onClick={() => setActiveTab(tab)}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)}
              </button>
            ))}
          </nav>
          <div className="section-header">
            <h3>
              {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Auctions
            </h3>
            <div className="slider-controls">
              <button onClick={prevTab} className="slider-btn">
                <ChevronLeft size={20} />
              </button>
              <button onClick={nextTab} className="slider-btn">
                <ChevronRight size={20} />
              </button>
            </div>
          </div>
          <div className="slider-container">
            <div
              className="auction-slider"
              style={{
                transform: `translateX(-${tabSlideIndex * (100 / 3)}%)`,
                transition: "transform 0.3s ease-in-out",
              }}
            >
              {tabAuctions[activeTab].map((a) => (
                <div key={a.auctionID} className="auction-card tab-card">
                  <img src={JSON.parse(a.images)[0]} alt={a.title} />
                  <h3>{a.title}</h3>
                  <p>Highest Bid: ${a.currentHighestBid}</p>
                  <p>Ends: {a.endDate}</p>
                </div>
              ))}
            </div>
          </div>
        </section>
      </div>
      <Footer />
    </>
  );
}

export default Homepage;
