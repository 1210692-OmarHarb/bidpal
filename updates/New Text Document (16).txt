import React, { useState, useMemo } from 'react';

const TaskSearch = () => {
  // Dummy data
  const dummyTasks = [
    {
      task_id: 1,
      task_name: "Design Homepage Layout",
      project_title: "Website Redesign",
      status: "In Progress",
      priority: "High",
      start_date: "2024-01-15",
      end_date: "2024-02-01",
      progress: 65
    },
    {
      task_id: 2,
      task_name: "Database Optimization",
      project_title: "Performance Enhancement",
      status: "Completed",
      priority: "Medium",
      start_date: "2024-01-10",
      end_date: "2024-01-25",
      progress: 100
    },
    {
      task_id: 3,
      task_name: "User Authentication",
      project_title: "Mobile App",
      status: "Pending",
      priority: "High",
      start_date: "2024-02-01",
      end_date: "2024-02-15",
      progress: 0
    },
    {
      task_id: 4,
      task_name: "API Documentation",
      project_title: "Backend Development",
      status: "In Progress",
      priority: "Low",
      start_date: "2024-01-20",
      end_date: "2024-02-10",
      progress: 30
    },
    {
      task_id: 5,
      task_name: "Unit Testing",
      project_title: "Website Redesign",
      status: "Pending",
      priority: "Medium",
      start_date: "2024-02-05",
      end_date: "2024-02-20",
      progress: 0
    }
  ];

  // Filter states
  const [filters, setFilters] = useState({
    priority: "",
    status: "",
    start_date: "",
    end_date: "",
    project: ""
  });

  // Sorting states
  const [sortBy, setSortBy] = useState("");
  const [sortDirection, setSortDirection] = useState("ASC");

  // Handle filter changes
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle sorting
  const handleSort = (column) => {
    if (sortBy === column) {
      setSortDirection(sortDirection === "ASC" ? "DESC" : "ASC");
    } else {
      setSortBy(column);
      setSortDirection("ASC");
    }
  };

  // Filter and sort tasks
  const filteredAndSortedTasks = useMemo(() => {
    let filtered = dummyTasks.filter(task => {
      if (filters.priority && task.priority !== filters.priority) return false;
      if (filters.status && task.status !== filters.status) return false;
      if (filters.project && !task.project_title.toLowerCase().includes(filters.project.toLowerCase())) return false;
      if (filters.start_date && task.start_date < filters.start_date) return false;
      if (filters.end_date && task.end_date > filters.end_date) return false;
      return true;
    });

    if (sortBy) {
      filtered.sort((a, b) => {
        let aVal = a[sortBy];
        let bVal = b[sortBy];
        
        if (sortBy === 'project_title') {
          aVal = a.project_title;
          bVal = b.project_title;
        }
        
        if (typeof aVal === 'string') {
          aVal = aVal.toLowerCase();
          bVal = bVal.toLowerCase();
        }
        
        if (sortDirection === "ASC") {
          return aVal > bVal ? 1 : -1;
        } else {
          return aVal < bVal ? 1 : -1;
        }
      });
    }

    return filtered;
  }, [filters, sortBy, sortDirection]);

  // Get status icon
  const getStatusIcon = (status) => {
    const iconProps = { width: "40", height: "40", className: "inline-block" };
    
    switch (status) {
      case 'Pending':
        return <div {...iconProps} className="w-10 h-10 bg-yellow-400 rounded-full flex items-center justify-center text-white font-bold">P</div>;
      case 'In Progress':
        return <div {...iconProps} className="w-10 h-10 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">IP</div>;
      case 'Completed':
        return <div {...iconProps} className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center text-white font-bold">✓</div>;
      default:
        return null;
    }
  };

  // Get status class
  const getStatusClass = (status) => {
    switch (status) {
      case 'Pending': return 'text-yellow-600 bg-yellow-100 px-2 py-1 rounded';
      case 'In Progress': return 'text-blue-600 bg-blue-100 px-2 py-1 rounded';
      case 'Completed': return 'text-green-600 bg-green-100 px-2 py-1 rounded';
      default: return '';
    }
  };

  // Get priority class
  const getPriorityClass = (priority) => {
    switch (priority) {
      case 'High': return 'text-red-600 bg-red-100 px-2 py-1 rounded font-semibold';
      case 'Medium': return 'text-orange-600 bg-orange-100 px-2 py-1 rounded';
      case 'Low': return 'text-gray-600 bg-gray-100 px-2 py-1 rounded';
      default: return '';
    }
  };

  return (
    <div className="container mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-6">
        <h1 className="text-3xl font-bold mb-6 text-gray-800">Task Search</h1>
        
        {/* Search Form */}
        <form className="mb-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4 items-end">
            <div>
              <label htmlFor="priority" className="block text-sm font-medium text-gray-700 mb-1">
                Priority:
              </label>
              <select
                name="priority"
                id="priority"
                value={filters.priority}
                onChange={handleFilterChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All</option>
                <option value="Low">Low</option>
                <option value="Medium">Medium</option>
                <option value="High">High</option>
              </select>
            </div>

            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700 mb-1">
                Status:
              </label>
              <select
                name="status"
                id="status"
                value={filters.status}
                onChange={handleFilterChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">All</option>
                <option value="Pending">Pending</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
              </select>
            </div>

            <div>
              <label htmlFor="start_date" className="block text-sm font-medium text-gray-700 mb-1">
                Start Date:
              </label>
              <input
                type="date"
                name="start_date"
                id="start_date"
                value={filters.start_date}
                onChange={handleFilterChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label htmlFor="end_date" className="block text-sm font-medium text-gray-700 mb-1">
                End Date:
              </label>
              <input
                type="date"
                name="end_date"
                id="end_date"
                value={filters.end_date}
                onChange={handleFilterChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <div>
              <label htmlFor="project" className="block text-sm font-medium text-gray-700 mb-1">
                Project:
              </label>
              <input
                type="text"
                name="project"
                id="project"
                value={filters.project}
                onChange={handleFilterChange}
                placeholder="Search project..."
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>

            <button
              type="button"
              onClick={() => setFilters({ priority: "", status: "", start_date: "", end_date: "", project: "" })}
              className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200"
            >
              Clear Filters
            </button>
          </div>
        </form>

        {/* Results Table */}
        <div className="overflow-x-auto">
          <table className="w-full bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-sm font-medium text-gray-700">Status</th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('task_id')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Task ID
                    {sortBy === 'task_id' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('task_name')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Title
                    {sortBy === 'task_name' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('project_title')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Project
                    {sortBy === 'project_title' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('status')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Status
                    {sortBy === 'status' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('priority')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Priority
                    {sortBy === 'priority' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('start_date')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Start Date
                    {sortBy === 'start_date' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('end_date')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Due Date
                    {sortBy === 'end_date' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
                <th className="px-4 py-3 text-left">
                  <button
                    onClick={() => handleSort('progress')}
                    className="text-sm font-medium text-gray-700 hover:text-blue-600 flex items-center"
                  >
                    Completion %
                    {sortBy === 'progress' && (
                      <span className="ml-1">{sortDirection === 'ASC' ? '↑' : '↓'}</span>
                    )}
                  </button>
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {filteredAndSortedTasks.length > 0 ? (
                filteredAndSortedTasks.map((task, index) => (
                  <tr key={task.task_id} className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
                    <td className="px-4 py-3">
                      {getStatusIcon(task.status)}
                    </td>
                    <td className="px-4 py-3">
                      <button className="text-blue-600 hover:text-blue-800 underline">
                        {task.task_id}
                      </button>
                    </td>
                    <td className="px-4 py-3 text-gray-900">{task.task_name}</td>
                    <td className="px-4 py-3 text-gray-700">{task.project_title}</td>
                    <td className="px-4 py-3">
                      <span className={getStatusClass(task.status)}>
                        {task.status}
                      </span>
                    </td>
                    <td className="px-4 py-3">
                      <span className={getPriorityClass(task.priority)}>
                        {task.priority}
                      </span>
                    </td>
                    <td className="px-4 py-3 text-gray-700">{task.start_date}</td>
                    <td className="px-4 py-3 text-gray-700">{task.end_date}</td>
                    <td className="px-4 py-3">
                      <div className="flex items-center">
                        <div className="w-full bg-gray-200 rounded-full h-2 mr-2">
                          <div
                            className="bg-blue-600 h-2 rounded-full"
                            style={{ width: `${task.progress}%` }}
                          ></div>
                        </div>
                        <span className="text-sm text-gray-600">{task.progress}%</span>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="9" className="px-4 py-8 text-center text-gray-500">
                    No tasks found matching your criteria.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        {/* Results Count */}
        <div className="mt-4 text-sm text-gray-600">
          Showing {filteredAndSortedTasks.length} of {dummyTasks.length} tasks
        </div>
      </div>
    </div>
  );



















love the idea How Auction Clubs / Groups Work

Who makes clubs?

Any logged-in user or organization can create a club.

Example: “Sneaker Collectors 2025” or “Vintage Camera Auctions.”

How do people join?

Other users can request to join the club.

The club creator (admin) must accept or reject requests.

What happens inside the club?

Members can see exclusive auctions that only the club can bid on.

Members can vote on which items should go up for auction next.

There’s a chat/discussion section (could be basic at first).

Why would people log in?

Clubs give them exclusive access → only members can bid in those auctions.

They feel part of a community instead of just a marketplace.

Example: If I love sneakers, I’ll join a Sneaker Club and check daily for drops. but lets change to ppl can join groups so they can bid together.